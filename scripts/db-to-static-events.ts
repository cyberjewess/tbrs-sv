// scripts/db-to-static-events.ts
// Usage: npx tsx scripts/db-to-static-events.ts [data/tbrs.db] [src/lib/data/events.ts]
import fs from "node:fs";
import path from "node:path";
import Database from "better-sqlite3";

// DB row shape
type Row = {
  id: number;
  date: string; // ISO YYYY-MM-DD or with time
  title: string;
  description: string | null;
  isHeadline: number; // 0/1
  isMystical: number; // 0/1
  externalLink: string | null;
  hideDate: number;   // 0/1
  created_at: string;
  updated_at: string;
};

const dbPath = process.argv[2] ?? "data/tbrs.db";
const outPath = process.argv[3] ?? "src/lib/data/events.ts";

// --- helpers ---
function escTsString(s: string): string {
  // minimal TS-safe single-quoted string
  return s.replace(/\\/g, "\\\\").replace(/'/g, "\\'").replace(/\r?\n/g, "\\n");
}

function toEventLiteral(r: Row): string {
  const parts: string[] = [];

  // date as a typed Date
  // Keep only first 10 chars if an ISO datetime slipped in (YYYY-MM-DD)
  const isoDate = r.date.slice(0, 10);
  parts.push(`date: new Date('${escTsString(isoDate)}')`);

  parts.push(`title: '${escTsString(r.title)}'`);

  if (r.description) parts.push(`description: '${escTsString(r.description)}'`);
  if (r.isHeadline) parts.push(`isHeadline: true`);
  if (r.isMystical) parts.push(`isMystical: true`);
  if (r.externalLink) parts.push(`externalLink: '${escTsString(r.externalLink)}'`);
  if (r.hideDate) parts.push(`hideDate: true`);

  // You can include `id` if your Event type includes it in static files:
  // parts.push(`id: ${r.id}`);

  return `{ ${parts.join(", ")} }`;
}

// --- main ---
const db = new Database(dbPath, { readonly: true });

const rows = db
  .prepare<[], Row>(`
    SELECT id, date, title, description, isHeadline, isMystical, externalLink, hideDate, created_at, updated_at
    FROM events
    ORDER BY date ASC, id ASC
  `)
  .all();

const header =
  `/* eslint-disable */\n` +
  `// AUTO-GENERATED FILE. Do not edit by hand.\n` +
  `// Generated by scripts/db-to-static-events.ts from ${path.resolve(dbPath)} on ${new Date().toISOString()}.\n\n` +
  `import type { Event } from '../types';\n\n`;

const body =
  `export const events: Event[] = [\n` +
  rows.map((r) => `  ${toEventLiteral(r)}`).join(",\n") +
  `\n];\n`;

fs.mkdirSync(path.dirname(outPath), { recursive: true });
fs.writeFileSync(outPath, header + body, "utf8");

console.log(`Wrote ${rows.length} events â†’ ${outPath}`);
